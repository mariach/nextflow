/*
 * Copyright (c) 2013-2014, Centre for Genomic Regulation (CRG).
 * Copyright (c) 2013-2014, Paolo Di Tommaso and the respective authors.
 *
 *   This file is part of 'Nextflow'.
 *
 *   Nextflow is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   Nextflow is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with Nextflow.  If not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'gradle-one-jar'
version = '0.7.1'

allprojects {
    apply plugin: 'groovy'

    repositories {
        flatDir(dirs: file('lib'))
        mavenCentral()
        maven { url 'http://uk.maven.org/maven2' }
        maven { url 'http://dl.bintray.com/paolo-ditommaso/maven'}
        mavenLocal()
    }

    dependencies {
        compile ("org.codehaus.groovy:groovy:${groovyVer}")
        testCompile ("cglib:cglib-nodep:${cglibVer}")
        testCompile ("org.objenesis:objenesis:${objenesisVer}")
        testCompile ("org.spockframework:spock-core:${spockVer}") {
            exclude module: 'groovy-all'
        }
    }
}

configurations {
    oneJarLib
    dnanexus.extendsFrom runtime
    hazelcast.extendsFrom runtime
    gridgain.extendsFrom runtime
    gdocLibs.extendsFrom runtime
}


dependencies {

    compile "org.codehaus.gpars:gpars:${gparsVer}"
    compile "org.slf4j:slf4j-api:${slf4jVer}"
    compile "org.slf4j:jcl-over-slf4j:${slf4jVer}"
    compile "org.slf4j:jul-to-slf4j:${slf4jVer}"
    compile "org.slf4j:log4j-over-slf4j:${slf4jVer}"
    compile "ch.qos.logback:logback-classic:${logbackVar}"
    compile "ch.qos.logback:logback-core:${logbackVar}"
    compile "commons-lang:commons-lang:${commonsLangVer}"
    compile "commons-io:commons-io:${commonsIoVer}"
    compile "com.beust:jcommander:${jcommanderVer}"
    compile "com.google.code.findbugs:jsr305:${jsr305Ver}"
    compile "com.esotericsoftware.kryo:kryo:${kryoVer}"
    compile "org.utgenome.thirdparty:picard:${picardVer}"
    compile files('lib/guava-cache-16.0.1.jar')

    oneJarLib files('one-jar/one-jar-boot-0.97.jar')

    dnanexus (project(':nxf-dnanexus')) {
        exclude module: 'nextflow'
    }

    hazelcast (project(':nxf-hazelcast')) {
        exclude module: 'nextflow'
    }

    gridgain (project(':nxf-gridgain')) {
        exclude module: 'nextflow'
    }

    gdocLibs 'org.fusesource.jansi:jansi:1.11'
    gdocLibs "org.codehaus.groovy:groovy-groovydoc:${groovyVer}"
    gdocLibs "org.codehaus.groovy:groovy-ant:${groovyVer}"

}

// patched as described here
// http://forums.gradle.org/gradle/topics/gradle_task_groovydoc_failing_with_noclassdeffounderror
groovydoc {
    groovyClasspath = project.configurations.gdocLibs
}

sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDirs = ['src/main/java', 'src/main/groovy']
sourceSets.main.resources.srcDirs = ['src/main/resources']

compileGroovy {
    options.compilerArgs = ['-XDignore.symbol.file']
}

subprojects {
    apply plugin: 'groovy'

    sourceSets {
        main {
            groovy { srcDirs = ['src/main'] }
            resources { srcDirs = ['src/resources'] }
        }

        test {
            groovy { srcDirs = ['src/test'] }
        }
    }

}


/*
 * Update the build timestamp in the source source file
 */
task buildInfo << {

    def file = new File('./src/main/groovy/nextflow/Const.groovy')
    def buildNum = 0
    def src = file.text
    src.find(/APP_BUILDNUM *= *([0-9]*)/) { buildNum = it[1]?.toInteger()+1 }
    src = src.replaceAll('APP_VER *= *"[0-9\\.]+"', "APP_VER = \"${version}\"" as String)
    src = src.replaceAll('APP_TIMESTAMP *= *[0-9]*', "APP_TIMESTAMP = ${System.currentTimeMillis()}" as String)
    if( buildNum ) {
        src = src.replaceAll('APP_BUILDNUM *= *[0-9]*', "APP_BUILDNUM = ${buildNum}" as String)
    }
    else {
        println "WARN: Unable to find current build number"
    }
    file.text = src

    // -- update 'nextflow' wrapper
    file = new File('nextflow')
    src = file.text
    src = src.replaceAll(/NXF_VER\=\$\{NXF_VER:-'.*'\}/, 'NXF_VER=\\${NXF_VER:-\'' + version + '\'}')
    file.text = src

    // -- update sphynx
    def major = version.split(/\./)[0..1].join('.')
    file = new File('docs/conf.py')
    src = file.text
    src = src.replaceAll(/version *= *'[0-9\.]+'/, "version = '$major'" as String)
    src = src.replaceAll(/release *= *'[0-9\.]+'/, "release = '$version'" as String)
    file.text = src
}

/*
 * Compile sources and copies all libs to target directory
 */
task compile(type: Copy) {
    dependsOn buildInfo, compileJava, compileGroovy, processResources

    from configurations.hazelcast
    from configurations.gridgain
    into "$buildDir/dependency-libs"
}


/*
 * Create the distribution stage folder i.e. creates a folder containing everything
 * have to be included in the distribution package
 */

task stage( type: Copy ) {
    dependsOn jar, javadoc, groovydoc

    // clean the target directory before create
    def target = file("$buildDir/stage/nextflow-$version")
    target.parentFile.deleteDir()
    target.mkdirs()

    destinationDir target

    // copy the launch script
    into('.') {
        from ('./nextflow.sh') // { exclude 'nextflow' }
        //rename { String fileName -> fileName.replace('nextflow.sh', 'nextflow') }
    }

    // copy application - and - runtime dependencies jars
    into('libs') {
        from "$buildDir/libs/nextflow-${version}.jar"
        from configurations.runtime
    }

    // still some stuff
    into('src') { from './src/main' }
    into('docs') { from '$buildDir/docs/groovydoc/'}

}

/*
 * Creates the Zip distribution file
 */
task distZip(type: Zip) {
    dependsOn stage
    from "$buildDir/stage/"
}

/*
 * creates the Tar distribution file
 */
task distTar(type: Tar) {
    dependsOn stage
    compression = Compression.GZIP
    from "$buildDir/stage/"
}


task dist() {
    dependsOn distZip, distTar
}

/*
 * Print the distribution file name when distXxx task completes
 */
gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (task == distTar && !state.failure) { println "\n** TAR: ${relativePath(distTar.archivePath)}\n\n"}
    if (task == distZip && !state.failure) { println "\n** ZIP: ${relativePath(distZip.archivePath)}\n\n"}
}


buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.rholder:gradle-one-jar:1.0.3'
    }
}

/*
 * Creates a self-contained *fat* jar shipping all required dependencies
 *
 * @link https://github.com/rholder/gradle-one-jar
 * @link http://one-jar.sourceforge.net/index.php?page=frameworks&file=frameworks
 */

def homeDir = System.properties['user.home']
def nextflowDir = "$homeDir/.nextflow/framework/$version"

task pack(type: OneJar) {
    mainClass = 'nextflow.script.CliRunner'
    manifest {
        attributes 'One-Jar-URL-Factory': 'com.simontuffs.onejar.JarClassLoader$OneJarURLFactory'
        attributes 'Timestamp': String.valueOf(System.currentTimeMillis())
    }
    useStable = false
    classifier = 'one'
    oneJarConfiguration = configurations.oneJarLib

    doFirst { def path=new File("$buildDir/one-jar-build"); if(path.exists()) path.deleteDir() }
    doLast {
        ant.copy(file: "$buildDir/libs/nextflow-${version}-one.jar", todir: nextflowDir, overwrite: true)
        println "\n>Nextflow package copied to: $nextflowDir"
    }
}

/*
 * Creates a self-contained *fat* jar shipping all required dependencies
 * including DnaNexus stuff
 */
task packDx(type: OneJar, dependsOn: configurations.dnanexus ) {
    mainClass = 'nextflow.script.CliRunner'
    manifest {
        attributes 'One-Jar-URL-Factory': 'com.simontuffs.onejar.JarClassLoader$OneJarURLFactory'
        attributes 'Timestamp': String.valueOf(System.currentTimeMillis())
    }
    useStable = false
    classifier = 'dx'
    oneJarConfiguration = configurations.oneJarLib
    targetConfiguration = configurations.dnanexus

    doFirst { def path=new File("$buildDir/one-jar-build"); if(path.exists()) path.deleteDir() }
    doLast {
        ant.copy(file: "$buildDir/libs/nextflow-${version}-dx.jar", todir: nextflowDir, overwrite: true)
        println "\n>Nextflow DX package copied to: $nextflowDir"
    }
}

/*
 * Creates a self-contained *fat* jar shipping all required dependencies
 * including Hazelcast stuff
 */
task packHz(type: OneJar, dependsOn: configurations.hazelcast ) {
    mainClass = 'nextflow.script.CliRunner'
    manifest {
        attributes 'One-Jar-URL-Factory': 'com.simontuffs.onejar.JarClassLoader$OneJarURLFactory'
        attributes 'Timestamp': String.valueOf(System.currentTimeMillis())
    }
    useStable = false
    classifier = 'hz'
    oneJarConfiguration = configurations.oneJarLib
    targetConfiguration = configurations.hazelcast

    doFirst { def path=new File("$buildDir/one-jar-build"); if(path.exists()) path.deleteDir() }
    doLast {
        ant.copy(file: "$buildDir/libs/nextflow-${version}-hz.jar", todir: nextflowDir, overwrite: true)
        println "\n>Nextflow HZ package copied to: $nextflowDir"
    }
}


/*
 * Creates a self-contained *fat* jar shipping all required dependencies
 * including Hazelcast stuff
 */
task packGg(type: OneJar, dependsOn: configurations.gridgain ) {
    mainClass = 'nextflow.script.CliRunner'
    manifest {
        attributes 'One-Jar-URL-Factory': 'com.simontuffs.onejar.JarClassLoader$OneJarURLFactory'
        attributes 'Timestamp': String.valueOf(System.currentTimeMillis())
    }
    useStable = false
    classifier = 'gg'
    oneJarConfiguration = configurations.oneJarLib
    targetConfiguration = configurations.gridgain

    doFirst { def path=new File("$buildDir/one-jar-build"); if(path.exists()) path.deleteDir() }
    doLast {
        ant.copy(file: "$buildDir/libs/nextflow-${version}-gg.jar", todir: nextflowDir, overwrite: true)
        println "\n>Nextflow GG package copied to: $nextflowDir"
    }
}

/*
 * Compile and pack all packages
 */
task packAll( dependsOn: [compile, pack, packHz, packDx, packGg]) {

}


final s3CmdOpts="-q --no-mime-magic --reduced-redundancy --acl-public --access_key=${System.getenv('NXF_AWS_ACCESS')} --secret_key=${System.getenv('NXF_AWS_SECRET')}"

/*
 * Publish 'nextflow' launcher
 */
task publish(type: Exec) {
    def cmd = "s3cmd put nextflow s3://www.nextflow.io/releases/latest/nextflow $s3CmdOpts"
    commandLine 'bash', '-c', cmd
}

/*
 * Tag and upload the release
 */
task release(type: Exec, dependsOn: [compile, test, packAll]) {

    def file0 = file('nextflow').absoluteFile
    def file1 = file("$buildDir/libs/nextflow-${version}-one.jar").absoluteFile
    def file2 = file("$buildDir/libs/nextflow-${version}-dx.jar").absoluteFile
    def file3 = file("$buildDir/libs/nextflow-${version}-hz.jar").absoluteFile
    def file4 = file("$buildDir/libs/nextflow-${version}-gg.jar").absoluteFile

    def temp = File.createTempFile('upload',null)
    temp.deleteOnExit()
    temp.text =  """\
    # tag the release
    git push || exit \$?
    (git tag -a v$version -m 'Tagging version $version [release]' -f && git push origin v$version -f) || exit \$?
    github-release release -u nextflow-io -r nextflow -t v$version --pre-release
    github-release upload -u nextflow-io -r nextflow -t v$version --file ${file0} --name ${file0.name}

    # upload assets
    s3cmd put ${file0} s3://www.nextflow.io/releases/v$version/${file0.name} $s3CmdOpts
    s3cmd put ${file1} s3://www.nextflow.io/releases/v$version/${file1.name} $s3CmdOpts
    s3cmd put ${file2} s3://www.nextflow.io/releases/v$version/${file2.name} $s3CmdOpts
    s3cmd put ${file3} s3://www.nextflow.io/releases/v$version/${file3.name} $s3CmdOpts
    s3cmd put ${file4} s3://www.nextflow.io/releases/v$version/${file4.name} $s3CmdOpts

    # publish the script as the latest
    s3cmd put ${file0} s3://www.nextflow.io/releases/latest/nextflow $s3CmdOpts

    """.stripIndent()

    commandLine 'bash', '-e', temp.absolutePath
}


/*
 * Create the dnanexus application archive and project structure
 */

File dxProject = file('./dx-project')

task dnanexus(dependsOn: packDx) << {

    def binFolder = new File(dxProject,'resources/usr/bin')
    binFolder.mkdirs()
    def target = new File(binFolder,'nextflow.jar')
    ant.copy(file: "$buildDir/libs/nextflow-${version}-dx.jar", tofile: target, overwrite: true)

    def dxApp = file('./subprojects/nxf-dnanexus/dxapp.json')
    def dxScript = file('./subprojects/nxf-dnanexus/dxapp.sh')

    // copy the 'dxapp.json' if not exists
    target = new File(dxProject, dxApp.name)
    if( !target.exists() ) {
        target.text = dxApp.text
    }

    // copy the 'dxapp.sh' if not exists
    target = new File(dxProject, dxScript.name)
    if( !target.exists() ) {
        target.text = dxScript.text
    }

    // copy the example files
    target = new File(dxProject,'resources/examples')
    target.mkdirs()
    def examples = new File('./examples')
    examples.eachFile {
        def copy = new File(target, it.name)
        if( it.isFile() && !copy.exists() ) copy.text = it.text
    }

    println """
    DnaNexus project ready
    1. move to ${dxProject}
    2. build it with the command 'dx build -f'
    3. launch it using the command 'dx run nextflow'
    """

}

